footprint: # Specification for the footprint of the robot.
  [ [ 0.27,  0.26],
    [ 0.27, -0.26],
    [-0.27, -0.26],
    [-0.27,  0.26] ]
footprint_padding: 0.05

# plugins: # Sequence of plugin specifications, one per layer. Each specification is a dictionary with name and type fields. The name is used to define the parameter namespace for the plugin.
#     - {name: static_map,       type: "costmap_2d::StaticLayer",    output: "screen"}
#     - {name: obstacles,        type: "costmap_2d::VoxelLayer",     output: "screen"}
#     - {name: inflation_layer,  type: "costmap_2d::InflationLayer", output: "screen"}


# static_layer:
#   enabled: true
#   map_topic: "/map" # The topic that the costmap subscribes to for the static map. This parameter is useful when you have multiple costmap instances within a single node that you want to use different static maps. - New in navigation 1.3.1
#   unknown_cost_value: -1 # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.
#   lethal_cost_threshold: 100 # The threshold value at which to consider a cost lethal when reading in a map from the map server.
#   first_map_only: false # Only subscribe to the first message on the map topic, ignoring all subsequent messages
#   subscribe_to_updates: false # In addition to map_topic, also subscribe to map_topic + "_updates"
#   track_unknown_space: true # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
#   use_maximum: false # Only matters if the static layer is not the bottom layer. If true, only the maximum value will be written to the master costmap.
#   trinary_costmap: true # If true, translates all map message values to NO_INFORMATION/FREE_SPACE/LETHAL_OBSTACLE (three values). If false, a full spectrum of intermediate values is possible.


obstacles_layer:
  # enabled: true
  # Sensor management parameters #

  # A list of observation source names separated by spaces.
  observation_sources: laser_scan_front_observation
    # laser_scan_back_observation
    # point_cloud_base_front_observation
    # point_cloud_torso_front_observation

  laser_scan_front_observation: {
      topic: base_scan_front,        # The topic on which sensor data comes in for this source.
      sensor_frame: base_scan_front, # The frame of the origin of the sensor.
      observation_persistence: 0.0,  # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
      expected_update_rate: 0.0,     # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings.
      data_type: LaserScan,          # The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
      clearing: true,                # Whether or not this observation should be used to clear out freespace.
      marking: true,                 # Whether or not this observation should be used to mark obstacles.
      max_obstacle_height: 2.0,      # The maximum height in meters of a sensor reading considered valid.
      min_obstacle_height: 0.0,      # The minimum height in meters of a sensor reading considered valid.
      obstacle_range: 2.5,           # The maximum range in meters at which to insert obstacles into the costmap using sensor data.
      raytrace_range: 3.0,           # The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
      inf_is_valid: false,           # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.
  }

  laser_scan_back_observation: {
      topic: base_scan_back,         # The topic on which sensor data comes in for this source.
      sensor_frame: base_scan_back,  # The frame of the origin of the sensor.
      observation_persistence: 0.0,  # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
      expected_update_rate: 0.0,     # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings.
      data_type: LaserScan,          # The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
      clearing: true,                # Whether or not this observation should be used to clear out freespace.
      marking: true,                 # Whether or not this observation should be used to mark obstacles.
      max_obstacle_height: 2.0,      # The maximum height in meters of a sensor reading considered valid.
      min_obstacle_height: 0.0,      # The minimum height in meters of a sensor reading considered valid.
      obstacle_range: 2.5,           # The maximum range in meters at which to insert obstacles into the costmap using sensor data.
      raytrace_range: 3.0,           # The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
      inf_is_valid: false,           # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.
  }

  point_cloud_base_front_observation: {
      topic: xtion/depth/points,     # The topic on which sensor data comes in for this source.
      sensor_frame: xtion_depth,     # The frame of the origin of the sensor.
      observation_persistence: 0.0,  # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
      expected_update_rate: 0.0,     # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings.
      data_type: PointCloud2,        # The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
      clearing: true,                # Whether or not this observation should be used to clear out freespace.
      marking: true,                 # Whether or not this observation should be used to mark obstacles.
      max_obstacle_height: 2.0,      # The maximum height in meters of a sensor reading considered valid.
      min_obstacle_height: 0.035,    # The minimum height in meters of a sensor reading considered valid.
      obstacle_range: 2.5,           # The maximum range in meters at which to insert obstacles into the costmap using sensor data.
      raytrace_range: 3.0,           # The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
      inf_is_valid: false,           # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.
  }

  point_cloud_torso_front_observation: {
      topic: kinect_one/depth/points,     # The topic on which sensor data comes in for this source.
      sensor_frame: kinect_one_depth,     # The frame of the origin of the sensor.
      observation_persistence: 0.0,  # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
      expected_update_rate: 0.0,     # How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings.
      data_type: PointCloud2,        # The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
      clearing: true,                # Whether or not this observation should be used to clear out freespace.
      marking: true,                 # Whether or not this observation should be used to mark obstacles.
      max_obstacle_height: 2.0,      # The maximum height in meters of a sensor reading considered valid.
      min_obstacle_height: 0.035,    # The minimum height in meters of a sensor reading considered valid.
      obstacle_range: 2.5,           # The maximum range in meters at which to insert obstacles into the costmap using sensor data.
      raytrace_range: 3.0,           # The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
      inf_is_valid: false,           # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.
  }

  # # ObstacleCostmapPlugin #
  # track_unknown_space: false # If false, each pixel has one of 2 states: lethal obstacle or free. If true, each pixel has one of 3 states: lethal obstacle, free, or unknown.
  # footprint_clearing_enabled: true # If true, the robot footprint will clear (mark as free) the space in which it travels.
  # combination_method: 1 # Changes the behaviour how the obstacle_layer handles incoming data from layers beyond it. Possible values are "Overwrite" (0), "Maximum" (1) and "Nothing" (99).

  # # VoxelCostmapPlugin #
  # publish_voxel_map: true # Whether or not to publish the underlying voxel grid for visualization purposes.
  # origin_z: 0.0 # The z origin of the map in meters.
  # z_resolution: 0.2 # The z resolution of the map in meters/cell.
  # z_voxels: 10 # The number of voxels to in each vertical column, the height of the grid is z_resolution * z_voxels.
  # unknown_threshold: 10 # The number of unknown cells allowed in a column considered to be "known"
  # mark_threshold: 0 # The maximum number of marked cells allowed in a column considered to be "free".
  # footprint_clearing_enabled: true # If true, the robot footprint will clear (mark as free) the space in which it travels.


inflation_layer:
  # enabled: true
  inflation_radius: 1.0    # The radius in meters to which the map inflates obstacle cost values.
  cost_scaling_factor: 10.0 # A scaling factor to apply to cost values during inflation.

proxemic_layer:
  enabled: true     # Whether to apply this plugin or not
  cutoff: 10.0      # Smallest value to publish on costmap adjustments
  amplitude: 77.0   # Amplitude of adjustments at peak
  covariance: 0.25  # Covariance of adjustments
  factor: 5.0       # Factor with which to scale the velocity
  keep_time: 0.75   # Pause before clearing leg list
